/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderDTO,
  Order,
} from '../models/index';
import {
    CreateOrderDTOFromJSON,
    CreateOrderDTOToJSON,
    OrderFromJSON,
    OrderToJSON,
} from '../models/index';

export interface SendRequest {
    createOrderDTO: CreateOrderDTO;
}

/**
 * 
 */
export class ExampleControllerApi extends runtime.BaseAPI {

    /**
     */
    async getExample1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getExample1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getExample1Raw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Order>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderFromJSON));
    }

    /**
     */
    async getOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Order>> {
        const response = await this.getOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async sendRaw(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.createOrderDTO === null || requestParameters.createOrderDTO === undefined) {
            throw new runtime.RequiredError('createOrderDTO','Required parameter requestParameters.createOrderDTO was null or undefined when calling send.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderDTOToJSON(requestParameters.createOrderDTO),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async send(requestParameters: SendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.sendRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
